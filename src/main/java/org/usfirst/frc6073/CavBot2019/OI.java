// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6073.CavBot2019;

import org.usfirst.frc6073.CavBot2019.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc6073.CavBot2019.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shootOutFastButton;
    public JoystickButton shootInFastButton;
    public JoystickButton hatchOpenButton;
    public JoystickButton hatchCloseButton;
    public JoystickButton hatchToggleButton;
    public JoystickButton backLiftUpButton;
    public JoystickButton backLiftDownButton;
    public JoystickButton frontLiftUpButton;
    public JoystickButton frontLiftDownButton;
    public Joystick driverController;
    public Joystick copilotController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        copilotController = new Joystick(1);
        
        driverController = new Joystick(0);
        
        frontLiftDownButton = new JoystickButton(driverController, 9);
        frontLiftDownButton.whileHeld(new FrontLiftDown());
        frontLiftUpButton = new JoystickButton(driverController, 8);
        frontLiftUpButton.whileHeld(new FrontLiftUp());
        backLiftDownButton = new JoystickButton(driverController, 7);
        backLiftDownButton.whileHeld(new BackLiftDown());
        backLiftUpButton = new JoystickButton(driverController, 6);
        backLiftUpButton.whileHeld(new BackLiftUp());
        hatchToggleButton = new JoystickButton(driverController, 5);
        hatchToggleButton.whileHeld(new HatchToggle());
        hatchCloseButton = new JoystickButton(driverController, 4);
        hatchCloseButton.whenPressed(new HatchClose());
        hatchOpenButton = new JoystickButton(driverController, 3);
        hatchOpenButton.whenPressed(new HatchOpen());
        shootInFastButton = new JoystickButton(driverController, 2);
        shootInFastButton.whileHeld(new Shoot(-1.0));
        shootOutFastButton = new JoystickButton(driverController, 1);
        shootOutFastButton.whileHeld(new Shoot(1.0));


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("HatchOpen", new HatchOpen());
        SmartDashboard.putData("HatchClose", new HatchClose());
        SmartDashboard.putData("HatchToggle", new HatchToggle());
        SmartDashboard.putData("Shoot: OutFast", new Shoot(1.0));
        SmartDashboard.putData("Shoot: OutSlow", new Shoot(0.5));
        SmartDashboard.putData("Shoot: InFast", new Shoot(-1.0));
        SmartDashboard.putData("Shoot: InSlow", new Shoot(-0.5));
        SmartDashboard.putData("LadderLiftUpDown", new LadderLiftUpDown());
        SmartDashboard.putData("BackLiftUp", new BackLiftUp());
        SmartDashboard.putData("BackLiftDown", new BackLiftDown());
        SmartDashboard.putData("FrontLiftUp", new FrontLiftUp());
        SmartDashboard.putData("FrontLiftDown", new FrontLiftDown());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverController() {
        return driverController;
    }

    public Joystick getCopilotController() {
        return copilotController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

